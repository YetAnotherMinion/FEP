language: cpp
#run on latest container based infrastructure
sudo: false

branches:
  - master

compiler:
# don't build with clang until we can get a c++11 version
#  - clang
  - gcc

cache:
  - /tmp/packages

#workaround for container based packages
addons:
  apt:
    packages:
      - gfortran        # used by all
env:
# right now the dependency installation just uses mpich2 built from source
#- MPI_VENDOR=openmpi
  - MPI_VENDOR=mpich2
before_install:
  - export DEP_DIR=$HOME/tmp
  - export MAIN_DIR=$PWD
  #create all needed dirs before any other steps 
  - mkdir -p {a1,a2,a3,a4}/obj; mkdir -p {a1,a2,a3,a4}/bin

install:
  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz"
      mkdir /tmp/cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C /tmp/cmake
      export PATH=/tmp/cmake/bin:${PATH}
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi
  - which cmake
  ############################################################################
  # Install PETSc, MPICH2, PUMI, BLAS, LAPACK, SOWING, SuperLU
  ############################################################################
  - ./sbin/install_dependencies.sh -c -p ${DEP_DIR}
  - ./sbin/generate_path ${DEP_DIR} > path
  - source path; mkdir -p {a1,a2,a3,a4}/obj; mkdir -p {a1,a2,a3,a4}/bin
  #create the bin directories
  - ./sbin/generate_config ${DEP_DIR} | tee a1/config.mk a2/config.mk a3/config.mk a4/config.mk
  - MPIEXEC='mpiexec'
  - test $MPI_VENDOR == mpich2 && MPIEXEC='mpiexec -launcher fork' || true
  - mpiexec --version
  - make -C a1
  - make -C a2
  - make -C a3
  - make -C a4

before_script:
  #currently the a1 code has hardcoded filenames, so we need to move the meshes
  #into the correct directory
  - cp ${DEP_DIR}/src/test_meshes/a1/cube.dmg ./a1/
  - cp ${DEP_DIR}/src/test_meshes/a1/mixed-mesh-10.smb ./a1/
  - cp ${DEP_DIR}/src/test_meshes/a1/tet-mesh-10.smb ./a1/
script:
  #because of hardcoded file paths, must be in a1 directory
  - cd a1
  - mpirun ./bin/a1tet
  - mpirun ./bin/a1quad
  - mpirun ./bin/a1mix
  - cd ..
  #probably should use mpi run, however not worrying about it now
  - mpirun ./a2/bin/a2 ${DEP_DIR}/src/test_meshes/a2/reorder_a.dmg ${DEP_DIR}/src/test_meshes/a2/reorder_a.smb
  - mpirun ./a2/bin/a2 ${DEP_DIR}/src/test_meshes/a2/reorder_b.dmg ${DEP_DIR}/src/test_meshes/a2/reorder_b.smb
  - mpirun ./a2/bin/a2 ${DEP_DIR}/src/test_meshes/a2/reorder_c.dmg ${DEP_DIR}/src/test_meshes/a2/reorder_c.smb
  - ./a4/bin/app_test
  - ./a4/bin/convergence_test

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/c42da23dc9f9ae61b63d
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always



